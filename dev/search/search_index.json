{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to ReadAlong-Studio's documentation","text":""},{"location":"#audiobook-alignment-for-indigenous-languages","title":"Audiobook alignment for Indigenous languages","text":"<p>This site provides the user documentation for the ReadAlong-Studio.</p> <p>The primary focus here is the Python CLI module, but there is also a section covering the Web App</p>"},{"location":"#related-links","title":"Related links","text":"<ul> <li>source code</li> <li>Web App: in English, in French, in Spanish, and source code</li> <li>The g2p library, used to convert letters to sounds.</li> </ul> <p> Note: to consult previous versions of this manual, click on the version drop-down at the top of this page. Versions before v1.0.20230228 are available here. </p>"},{"location":"advanced-use/","title":"Advanced topics","text":""},{"location":"advanced-use/#adding-a-new-language-to-g2p","title":"Adding a new language to g2p","text":"<p>If you want to align an audio book in a language that is not yet supported by the g2p library, you will have to write your own g2p mapping for that language.</p> <p>References:</p> <ul> <li>The g2p library and its    documentation.</li> <li>The 7-part blog post on creating g2p mappings    on the Mother Tongues Blog.</li> </ul> <p>Once you have created a g2p mapping for your language, please consider contributing it to the project so others can also benefit from your work!</p>"},{"location":"advanced-use/#pre-processing-your-data","title":"Pre-processing your data","text":"<p>Manipulating the text and/or audio data that you are trying to align can sometimes produce longer, more accurate ReadAlongs, that throw less errors when aligning. While some of the most successful techniques we have tried are outlined here, you may also need to customize your pre-processing to suit your specific data.</p>"},{"location":"advanced-use/#audio-pre-processing","title":"Audio pre-processing","text":""},{"location":"advanced-use/#adding-silences","title":"Adding silences","text":"<p>Adding 1 second segments of silence in between phrases or paragraphs sometimes improves the performance of the aligner. We do this using the Pydub library which can be pip-installed. Keep in mind that Pydub uses milliseconds.</p> <p>If your data is currently 1 audio file, you will need to split it into segments where you want to put the silences.</p> <pre><code>ten_seconds = 10 * 1000\nfirst_10_seconds = soundtrack[:ten_seconds]\nlast_5_seconds = soundtrack[-5000:]\n</code></pre> <p>Once you have your segments, create an MP3 file containing only 1 second of silence.</p> <pre><code>from pydub import AudioSegment\n\nwfile = \"appended_1000ms.mp3\"\nsilence = AudioSegment.silent(duration=1000)\nsoundtrack = silence\n</code></pre> <p>Then you loop the audio files you want to append (segments and silence).</p> <pre><code>seg = AudioSegment.from_mp3(mp3file)\nsoundtrack = soundtrack + silence + seg\n</code></pre> <p>Write the soundtrack file as an MP3. This will then be the audio input for your Read-Along.</p> <pre><code>soundtrack.export(wfile, format=\"mp3\")\n</code></pre>"},{"location":"advanced-use/#text-pre-processing","title":"Text pre-processing","text":""},{"location":"advanced-use/#numbers","title":"Numbers","text":"<p>ReadAlong Studio cannot align numbers written as digits (ex. \"123\"). Instead, you will need to write them out (ex. \"one two three\" or \"one hundred and twenty three\") depending on how they are read in your audio file.</p> <p>If you have lots of data, and the numbers are spoken in English (or any of their supported languages), consider adding a library like num2words to your pre-processing.</p> <pre><code>num2words 123456789\none hundred and twenty-three million, four hundred and fifty-six thousand, seven hundred and eighty-nine\n</code></pre>"},{"location":"cli-guide/","title":"Command line interface (CLI) user guide","text":"<p>This page contains guidelines on using the ReadAlongs CLI. See also Command line interface (CLI) reference  for the full CLI reference.</p> <p>The ReadAlongs CLI has two main commands: <code>readalongs make-xml</code> and <code>readalongs align</code>.</p> <ul> <li>If your data is a plain text file, you can run <code>make-xml</code> to turn   it into ReadAlongs XML, which you can then align with   <code>align</code>. Doing this in two steps allows you to modify the XML file   before aligning it (e.g., to mark that some text is in a different   language, to flag some do-not-align text, or to drop anchors in).</li> <li>Alternatively, if your plain text file does not need to be modified, you can   run <code>align</code> directly on it, since it also accepts plain text input.  You'll   need the <code>-l &lt;language(s)&gt;</code> option to indicate what language your text is in.</li> </ul> <p>Two additional commands are sometimes useful: <code>readalongs tokenize</code> and <code>readalongs g2p</code>.</p> <ul> <li><code>tokenize</code> takes the output of <code>make-xml</code> and tokenizes it, wrapping each   word in the text in a <code>&lt;w&gt;</code> element.</li> <li><code>g2p</code> takes the output of <code>tokenize</code> and mapping each word to its   phonetic transcription using the g2p library. The phonetic transcription is   represented using the ARPABET phonetic codes and are added in the <code>ARPABET</code>   attribute to each <code>&lt;w&gt;</code> element.</li> </ul> <p>The result of <code>tokenize</code> or <code>g2p</code> can be fixed manually if necessary and then used as input to <code>align</code>.</p>"},{"location":"cli-guide/#getting-from-txt-to-xml-with-readalongs-make-xml","title":"Getting from TXT to XML with readalongs make-xml","text":"<p>Run <code>readalongs make-xml</code> to make the ReadAlongs XML file for <code>align</code> from a TXT file.</p> <p><code>readalongs make-xml [options] [story.txt] [story.readalong]</code></p> <p><code>[story.txt]</code>: path to the plain text input file (TXT)</p> <p><code>[story.readalong]</code>: Path to the XML output file</p> <p>The plain text file must be plain text encoded in <code>UTF-8</code> with one sentence per line. Paragraph breaks are marked by a blank line, and page breaks are marked by two blank lines.</p> Key Options Option descriptions <code>-l, --language(s)</code> (required) The language code for story.txt. Specifying multiple comma- or colon-separated languages triggers the g2p cascade. <code>-f, --force-overwrite</code> Force overwrite output files (handy if you're troubleshooting and will be aligning repeatedly) <code>-h, --help</code> Displays CLI guide for <code>make-xml</code> <p>The <code>-l, --language</code> argument requires a language code, typically a language\u2019s 3 character ISO code, as an argument. Use <code>-l und</code> to use the generic, language-independent mapping.</p> <p>The supported languages can be listed by running <code>readalongs langs</code>, and they can also be found in the Supported languages section below.</p> <p>So, a full command for a story in Algonquin, with an implicit g2p fallback to Undetermined, would be something like:</p> <p><code>readalongs make-xml -l alq Studio/story.txt Studio/story.readalong</code></p> <p>The generated XML will be parsed in to sentences. At this stage you can edit the XML to have any modifications, such as adding <code>do-not-align</code> as an attribute of any element in your XML.</p> <p>The format of the generated XML is based on TEI Lite but is considerably simplified.  The DTD (document type definition) can be found in the ReadAlong Studio source code under <code>readalongs/static/read-along-1.2.dtd</code>.</p>"},{"location":"cli-guide/#handling-mismatches-do-not-align","title":"Handling mismatches: do-not-align","text":"<p>There are two types of \"do-not-align\" (DNA) content: DNA audio and DNA text.</p> <p>To use DNA text, add <code>do-not-align</code> as an attribute to any element in the xml (word, sentence, paragraph, or page).</p> <pre><code>&lt;w do-not-align=\"true\" id=\"t0b0d0p0s0w0\"&gt;dog&lt;/w&gt;\n</code></pre> <p>If you have already run <code>readalongs make-xml</code>, there will be documentation for DNA text in comments at the beginning of the generated xml file.</p> <pre><code>&lt;!-- To exclude any element from alignment, add the do-not-align=\"true\" attribute to\n     it, e.g., &lt;p do-not-align=\"true\"&gt;...&lt;/p&gt;, or\n     &lt;s&gt;Some text &lt;foo do-not-align=\"true\"&gt;do not align this&lt;/foo&gt; more text&lt;/s&gt; --&gt;\n</code></pre> <p>To use DNA audio, you can specify a timeframe in milliseconds in the <code>config.json</code> file which you want the aligner to ignore.</p> <pre><code>\"do-not-align\":\n    {\n    \"method\": \"remove\",\n    \"segments\":\n    [\n        {\n            \"begin\": 1,\n            \"end\": 17000\n        }\n    ]\n    }\n</code></pre>"},{"location":"cli-guide/#use-cases-for-dna","title":"Use cases for DNA","text":"<ul> <li>Spoken introduction in the audio file that has no accompanying text   (DNA audio)</li> <li>Text that has no matching audio, such as credits/acknowledgments (DNA   text)</li> </ul>"},{"location":"cli-guide/#aligning-your-text-and-audio-with-readalongs-align","title":"Aligning your text and audio with readalongs align","text":"<p>Run <code>readalongs align</code> to align a text file (RAS or TXT) and an audio file to create a time-aligned audiobook.</p> <p><code>readalongs align [options] [story.txt/xml] [story.mp3/wav] [output_base]</code></p> <p><code>[story.txt/ras]</code>: path to the text file (TXT or RAS)</p> <p><code>[story.mp3/wav]</code>: path to the audio file (MP3, WAV or any format supported by ffmpeg)</p> <p><code>[output_base]</code>: path to the directory where the output files will be created, as <code>output_base*</code></p> Key Options Option descriptions <code>-l, --language(s)</code> The language code for story.txt. Specifying multiple comma- or colon-separated languages triggers the g2p cascade. (required if input is plain text) <code>-c, --config PATH</code> Use ReadAlong-Studio configuration file (in JSON format) <code>--debug-g2p</code> Display verbose g2p debugging messages <code>-s, --save-temps</code> Save intermediate stages of processing and temporary files (dictionary, FSG, tokenization, etc.) <code>-f, --force-overwrite</code> Force overwrite output files (handy if you\u2019re troubleshooting and will be aligning repeatedly) <code>-h, --help</code> Displays CLI guide for <code>align</code> <p>See above for more information on the <code>-l, --language</code> argument.</p> <p>A full command could be something like:</p> <p><code>readalongs align -f -c config.json story.readalong story.mp3 story-aligned</code></p> <p>Is the text file plain text or XML?</p> <p><code>readalongs align</code> accepts its text input as a plain text file or a ReadAlongs XML file.</p> <ul> <li>If the file name ends with <code>.txt</code>, it will be read as plain text.</li> <li>If the file name ends with <code>.xml</code> or <code>.readalong</code>, it will be read as ReadAlongs XML.</li> <li>With other extensions, the beginning of the file is examined to   automatically determine if it's XML or plain text.</li> </ul>"},{"location":"cli-guide/#supported-languages","title":"Supported languages","text":"<p>The <code>readalongs langs</code> command can be used to list all supported languages.</p> <p>Here is that list at the time of compiling this documentation:</p> <pre><code>alq         Algonquin\natj         Atikamekw\nckt         Chukchi\nclm         Klallam\ncrg-dv      Michif\ncrg-tmd     Michif\ncrj         East Cree, Southern\ncrk         Plains Cree\ncrl         East Cree, Northern\ncrm         Moose Cree\ncsw         Swampy Cree\nctp         Western Highland Chatino\ndan         Danish\neng         English\nfin         Finnish\nfra         French\ngit         Gitksan\ngla         Scottish Gaelic\ngwi         Gwich'in\nhaa         H\u00e4n\nikt         Inuktut, Western\niku         Inuktitut Syllabics\niku-sro     Inuktitut Romanized\nkkz         Kaska\nkwk-boas    Kwak'wala (Boas orthography)\nkwk-napa    Kwak'wala (NAPA orthography)\nkwk-umista  Kwak'wala (U'mista orthography)\nlml         Raga\nmic         Mi'kmaq\nmoe         Innu-aimun\nmoh         Kanien'k\u00e9ha\noji         Ojibwe\noji-syl     Ojibwe Syllabics\noka         nsyilxc\u0259n\nsal-apa     Salishan languages with APA-based writing systems\nsee         Seneca\nsrs         Tsuut'ina\nstr         SEN\u0106O\u0166EN\ntau         Upper Tanana\ntce         Southern Tutchone\ntgx         Tagish\ntli         Tlingit\nttm         Northern Tutchone\nund         Undetermined\nwin         Hooc\u0105k\n</code></pre> <p>See Adding a new language to g2p for references on adding new languages to that list.</p>"},{"location":"cli-guide/#adding-titles-images-and-do-not-align-segments-via-the-configjson-file","title":"Adding titles, images and do-not-align segments via the config.json file","text":"<p>Some additional parameters can be specified via a config file: create a JSON file called <code>config.json</code>, possibly in the same folder as your other ReadAlong input files for convenience. The config file currently accepts a few components: adding titles and headers, adding images to your ReadAlongs, and DNA audio (see Handling mismatches: do-not-align).</p> <p>To add a title and headers to the output HTML, you can use the keys <code>\"title\"</code>, <code>\"header\"</code>, and <code>\"subheader\"</code>, for example:</p> <pre><code>{\n  \"title\": \"My awesome read-along\",\n  \"header\": \"A story in my language\",\n  \"subheader\": \"Read by me\"\n}\n</code></pre> <p>To add images, indicate the page number as the key, and the name of the image file as the value, as an entry in the <code>\"images\"</code> dictionary.</p> <pre><code>{ \"images\": { \"0\": \"p1.jpg\", \"1\": \"p2.jpg\" } }\n</code></pre> <p>Both images and DNA audio can be specified in the same config file, such as in the example below:</p> <pre><code>{\n    \"images\":\n        {\n            \"0\": \"image-for-page1.jpg\",\n            \"1\": \"image-for-page1.jpg\",\n            \"2\": \"image-for-page2.jpg\",\n            \"3\": \"image-for-page3.jpg\"\n        },\n\n    \"do-not-align\":\n        {\n        \"method\": \"remove\",\n        \"segments\":\n            [\n                {   \"begin\": 1,     \"end\": 17000   },\n                {   \"begin\": 57456, \"end\": 68000   }\n            ]\n        }\n}\n</code></pre> <p>Warning: mind your commas! The JSON format is very picky: commas separate elements in a list or dictionnary, but if you accidentally have a comma after the last element (e.g., by cutting and pasting whole lines), you will get a syntax error.</p>"},{"location":"cli-guide/#the-g2p-cascade","title":"The g2p cascade","text":"<p>Sometimes the g2p conversion of the input text will not succeed, for various reasons. A word might use characters not recognized by the g2p mapping for the language, or it might be in a different language. Whatever the reason, the output for the g2p conversion will not be valid ARPABET, and so the system will not be able to proceed to alignment by the aligner, SoundSwallower.</p> <p>If you know the language for that text, you can mark it as such in the XML. E.g.:</p> <pre><code>&lt;s xml:lang=\"eng\"&gt;This sentence is in English.&lt;/s&gt;\n</code></pre> <p>The <code>xml:lang</code> attribute can be added to any element in the XML structure and will apply to text at any depth within that element, unless the attribute is specified again at a deeper level, e.g.:</p> <pre><code>&lt;s xml:lang=\"eng\"&gt;English mixed with &lt;foo xml:lang=\"fra\"&gt;fran\u00e7ais&lt;/foo&gt;.&lt;/s&gt;\n</code></pre> <p>There is also a simpler option available: the g2p cascade. When the g2p cascade is enabled, the g2p mapping will be done by first trying the language specified by the <code>xml:lang</code> attribute in the XML file (or with the first language provided to the <code>-l</code> flag on the command line, if the input is plain text). For each word where the result is not valid ARPABET, the g2p mapping will be attempted again with each of the languages specified in the g2p cascade, in order, until a valid ARPABET conversion is obtained. If no valid conversion is possible, are error message is printed and alignment is not attempted.</p> <p>To enable the g2p cascade, provide multiple languages via the <code>-l</code> switch (for plain text input) or add the <code>fallback-langs=\"l2,l3,...</code> attribute to any element in the XML file:</p> <pre><code>&lt;s xml:lang=\"eng\" fallback-langs=\"fra,und\"&gt;English mixed with fran\u00e7ais.&lt;/s&gt;\n</code></pre> <p>These command line examples will set the language to <code>fra</code>, with the g2p cascade falling back to <code>eng</code> and then <code>und</code> (see below) when needed.</p> <pre><code>readalongs make-xml -l fra,eng myfile.txt myfile.readalong\nreadalongs align -l fra,eng myfile.txt myfile.wav output-dir\n</code></pre>"},{"location":"cli-guide/#the-undetermined-language-code-und","title":"The \"Undetermined\" language code: und","text":"<p>Notice how the sample XML snippet above has <code>und</code> as the last language in the cascade. <code>und</code>, for Undetermined, is a special language mapping that uses the definition of all characters in all alphabets that are part of the Unicode standard, and maps them as if the name of that character was how it is pronounced. While crude, this mapping works surprisingly well for the purposes of forced alignment, and allows <code>readalongs align</code> to successfully align most text with a few foreign words without any manual intervention.</p> <p>Since we recommend systematically using <code>und</code> at the end of the cascade, it is now added by default after the languages specified with the <code>-l</code> switch to both <code>readalongs align</code> and <code>readalongs make-xml</code>. Note that adding other languages after <code>und</code> will have no effect, since the Undetermined mapping will map any string to valid ARPABET.</p> <p>In the unlikely event that you want to disable adding <code>und</code>, add the hidden <code>--lang-no-append-und</code> switch, or delete <code>und</code> from the <code>fallback-langs</code> attribute in your XML input.</p>"},{"location":"cli-guide/#debugging-g2p-mapping-issues","title":"Debugging g2p mapping issues","text":"<p>The warning messages issued by <code>readalongs g2p</code> and <code>readalongs align</code> indicate which words are causing g2p problems and what fallbacks were tried. It can be worth inspecting to input text to fix any encoding or spelling errors highlighted by these warnings. More detailed messages can be produced by adding the <code>--debug-g2p</code> switch, to obtain a lot more information about g2p'ing words in each language g2p was unsucessfully attempted.</p>"},{"location":"cli-guide/#breaking-up-the-pipeline","title":"Breaking up the pipeline","text":"<p>Some commands were added to the CLI in the last year to break processing up step by step.</p> <p>The following series of commands:</p> <pre><code>readalongs make-xml -l l1,l2 file.txt file.readalong\nreadalongs tokenize file.readalong file.tokenized.readalong\nreadalongs g2p file.tokenized.readalong file.g2p.readalong\nreadalongs align file.g2p.readalong file.wav output\n</code></pre> <p>is equivalent to the single command:</p> <pre><code>readalongs align -l l1,l2 file.txt file.wav output\n</code></pre> <p>except that when running the pipeline as four separate commands, you can edit the XML files between each step to make manual adjustments and corrections if you want, like inserting anchors, silences, changing the language for indivual elements, or even manually editting the ARPABET encoding for some words.</p>"},{"location":"cli-guide/#anchors-marking-known-alignment-points","title":"Anchors: marking known alignment points","text":"<p>Long audio/text file pairs can sometimes be difficult to align correctly, because the aligner might get lost part way through the alignment process. Anchors can be used to tell the aligner about known correspondance points between the text and the audio stream.</p>"},{"location":"cli-guide/#anchor-syntax","title":"Anchor syntax","text":"<p>Anchors are inserted in the XML file (the output of <code>readalongs make-xml</code>, <code>readalongs tokenize</code> or <code>readalongs g2p</code>) using the following syntax: <code>&lt;anchor time=\"3.42s\"/&gt;</code> or <code>&lt;anchor time=\"3420ms\"/&gt;</code>. The time can be specified in seconds (this is the default) or milliseconds.</p> <p>Anchors can be placed anywhere in the XML file: between/before/after any element or text.</p> <p>Example:</p> <pre><code>&lt;?xml version='1.0' encoding='utf-8'?&gt;\n&lt;read-along version=\"1.0\"&gt; &lt;text xml:lang=\"eng\"&gt; &lt;body&gt;\n    &lt;anchor time=\"143ms\"/&gt;\n    &lt;div type=\"page\"&gt;\n    &lt;p&gt;\n        &lt;s&gt;Hello.&lt;/s&gt;\n        &lt;anchor time=\"1.62s\"/&gt;\n        &lt;s&gt;This is &lt;anchor time=\"3.81s\"/&gt; &lt;anchor time=\"3.94s\"/&gt; a test&lt;/s&gt;\n        &lt;s&gt;&lt;anchor time=\"4123ms\"/&gt;weirdword&lt;anchor time=\"4789ms\"/&gt;&lt;/s&gt;\n    &lt;/p&gt;\n    &lt;/div&gt;\n    &lt;anchor time=\"6.74s\"/&gt;\n&lt;/body&gt; &lt;/text&gt; &lt;/read-along&gt;\n</code></pre>"},{"location":"cli-guide/#anchor-semantics","title":"Anchor semantics","text":"<p>When anchors are used, the alignment task is divided at each anchor, creating a series of segments that are aligned independently from one another. When alignment is performed, the aligner sees only the audio and the text from the segment being processed, and the results are joined together afterwards.</p> <p>The beginning and end of files are implicit anchors: n anchors define n+1 segments: from the beginning of the audio and text to the first anchor, between pairs of anchors, and from the last anchor to the end of the audio and text.</p> <p>Special cases equivalent to do-not-align audio:</p> <ul> <li>If an anchor occurs before the first word in the text, the audio up to that   anchor\u2019s timestamps is excluded from alignment.</li> <li>If an anchor occurs after the last word, the end of the audio is excluded   from alignment.</li> <li>If two anchors occur one after the other, the time span between them in the   audio is excluded from alignment.</li> </ul> <p>Using anchors to define do-not-align audio segments is effectively the same as marking them as \"do-not-align\" in the <code>config.json</code> file, except that DNA segments declared using anchors have a known alignment with respect to the text, while the position of DNA segments declared in the config file are inferred by the aligner.</p>"},{"location":"cli-guide/#anchor-use-cases","title":"Anchor use cases","text":"<ol> <li>Alignment fails because the stream is too long or too difficult to    align.</li> </ol> <p>When alignment fails, listen to the audio stream and try to identify    where some words you can pick up start or end. Even if you don\u2019t    understand the language, there might be some words you\u2019re able to    pick up and use as anchors to help the aligner.</p> <ol> <li>You already know where some words/sentences/paragraphs start or end,    because the data came with some partial alignment information. For    example, the data might come from an ELAN file with sentence    alignments.</li> </ol> <p>These known timestamps can be converted to anchors.</p>"},{"location":"cli-guide/#silences-inserting-pause-like-silences","title":"Silences: inserting pause-like silences","text":"<p>There are times where you might want a read-along to pause at a particular place for a specific time and resume again after. This can be accomplished by inserting silences in your audio stream. You can do it manually by editing your audio file ahead of time, but you can also have <code>readalongs align</code> insert the silences for you.</p>"},{"location":"cli-guide/#silence-syntax","title":"Silence syntax","text":"<p>Silences are inserted in the audio stream wherever a <code>silence</code> element is found in the XML input. TODO say something about how the silence placement determined. The syntax is like the anchor syntax: <code>&lt;silence dur=\"4.2s\"/&gt;</code> or <code>&lt;silence dur=\"100ms\"/&gt;</code>. Like anchors, silence elements can be inserted anywhere.</p> <p>Example:</p> <pre><code>&lt;?xml version='1.0' encoding='utf-8'?&gt;\n&lt;read-along version=\"1.0\"&gt; &lt;text xml:lang=\"eng\"&gt; &lt;body&gt;\n    &lt;silence dur=\"1s\"/&gt;\n    &lt;div type=\"page\"&gt;\n    &lt;p&gt;\n        &lt;s&gt;Hello.&lt;/s&gt;\n        &lt;silence dur=\"10s\"/&gt;\n        &lt;s&gt;After this pregnant pause, &lt;silence dur=\"100ms\"/&gt; we'll pause\n           again before it's all over!&lt;/s&gt;\n    &lt;/p&gt;\n    &lt;silence dur=\"1s\"/&gt;\n    &lt;/div&gt;\n&lt;/body&gt; &lt;/text&gt; &lt;/read-along&gt;\n</code></pre>"},{"location":"cli-guide/#silence-use-cases","title":"Silence use cases","text":"<ol> <li>Your read along has a title page that is not read out in the audio stream:    insert a silence at the beginning so that it stays on the first page for    the specified time.    TODO: test that a silence before the first word really keeps the RA on the    first page during that silence, even if all text on the first page is DNA.</li> <li>Your read along has a credits page at the end that is not read out in the    audio stream: insert a silence at the end so that people see that credits    page for the specified time before the streaming end.    TODO: also test that this use case works as described.</li> </ol>"},{"location":"cli-ref/","title":"Command line interface (CLI) reference","text":"<p>This page contains the full reference documentation for each command in the CLI. See also Command line interface (CLI) user guide for guidelines on using the CLI.</p> <p>The ReadAlongs CLI has five key commands:</p> <ul> <li><code>readalongs align</code>: full alignment pipeline, from plain text or XML to a   viewable readalong</li> <li><code>readalongs make-xml</code>: convert a plain text file into XML, for align</li> <li><code>readalongs tokenize</code>: tokenize an XML file</li> <li><code>readalongs g2p</code>: g2p a tokenized XML file</li> <li><code>readalongs langs</code>: list supported languages</li> </ul> <p>Each command can be run with <code>-h</code> or <code>--help</code> to display its usage manual, e.g., <code>readalongs -h</code>, <code>readalongs align --help</code>.</p>"},{"location":"cli-ref/#readalongs-align","title":"readalongs align","text":"<p>Align TEXTFILE and AUDIOFILE and create output files as OUTPUT_BASE.* in directory OUTPUT_BASE/.</p> <p>TEXTFILE:    Input text file path (in XML or plain text)</p> <p>If TEXTFILE has a .xml or .readalong extension or starts with an XML declaration line, it is parsed as XML and can be in one of three formats:  - the output of 'readalongs make-xml',  - the output of 'readalongs tokenize', or  - the output of 'readalongs g2p'.</p> <p>If TEXTFILE has a .txt extension or does not start with an XML declaration line, it is read as plain text with the following conventions:  - The text should be plain UTF-8 text without any markup.  - Paragraph breaks are indicated by inserting one blank line.  - Page breaks are indicated by inserting two blank lines.</p> <p>One can add the known ARPABET phonetics in the XML for words ( elements) that are not correctly handled by g2p in the output of 'readalongs tokenize' or 'readalongs g2p', via the ARPABET attribute. <p>One can add anchor elements in the XML, e.g., '', to mark known anchor points between the audio and text stream.</p> <p>AUDIOFILE:   Input audio file path, in any format supported by ffmpeg</p> <p>OUTPUT_BASE: Output files will be saved as OUTPUT_BASE/OUTPUT_BASE.*</p> <p>Usage:</p> <pre><code>readalongs align [OPTIONS] TEXTFILE AUDIOFILE OUTPUT_BASE\n</code></pre> <p>Options:</p> <pre><code>  -b, --bare                      Bare alignments do not split silences\n                                  between words\n  -c, --config PATH               Use ReadAlong-Studio configuration file (in\n                                  JSON format)\n  -o, --output-formats TEXT       Comma- or colon-separated list of additional\n                                  output file formats to export to. The www\n                                  bundle and Offline HTML are always\n                                  generated, but one or more of these formats\n                                  can be requested in addition:\b\n\n                                  eaf (ELAN file), srt (SRT subtitle),\n                                  TextGrid (Praat TextGrid), vtt (WebVTT\n                                  subtitle), xhtml (Simple XHTML)\n  -f, --force-overwrite           Force overwrite output files\n  -l, --language, --languages TEXT\n                                  The language code(s) for text in TEXTFILE\n                                  (use only with plain text input); use 'und'\n                                  for the generic language-independent\n                                  mapping; multiple codes can be joined by ','\n                                  or ':', or by repeating the option, to\n                                  enable the g2p cascade (run 'readalongs g2p\n                                  -h' for details); run 'readalongs langs' to\n                                  list all supported languages.\n  -m, --align-mode [strict|moderate|loose|auto]\n                                  Decoder search parameters: 'strict' means a\n                                  narrow beam, fastest but might fail to find\n                                  an alignment; 'loose' means an unlimited\n                                  beam, slowest, should always succeed but the\n                                  alignment is more likely to be wrong;\n                                  'moderate' is in between; 'auto' (the\n                                  default) means try strict first, and fall\n                                  back to moderate then loose if no alignment\n                                  is found.\n  -s, --save-temps                Save intermediate stages of processing and\n                                  temporary files (dictionary, FSG,\n                                  tokenization, etc)\n  -d, --debug                     Display debugging messages\n  --debug-aligner                 Display logs from the aligner\n  --debug-g2p                     Display verbose g2p error messages\n  -h, --help                      Show this message and exit.\n</code></pre>"},{"location":"cli-ref/#readalongs-make-xml","title":"readalongs make-xml","text":"<p>make XMLFILE for 'readalongs align' from PLAINTEXTFILE.</p> <p>PLAINTEXTFILE must be plain text encoded in UTF-8, with one sentence per line, paragraph breaks marked by a blank line, and page breaks marked by two blank lines.</p> <p>PLAINTEXTFILE: Path to the plain text input file, or - for stdin</p> <p>XMLFILE:       Path to the XML output file, or - for stdout [default: PLAINTEXTFILE.readalong]</p> <p>Usage:</p> <pre><code>readalongs make-xml [OPTIONS] PLAINTEXTFILE [XMLFILE]\n</code></pre> <p>Options:</p> <pre><code>  -d, --debug                     Add debugging messages to logger\n  -f, --force-overwrite           Force overwrite output files\n  -l, --language, --languages TEXT\n                                  The language code(s) for text in\n                                  PLAINTEXTFILE; use 'und' for the generic\n                                  language-independent mapping; multiple codes\n                                  can be joined by ',' or ':', or by repeating\n                                  the option, to enable the g2p cascade (run\n                                  'readalongs g2p -h' for details); run\n                                  'readalongs langs' to list all supported\n                                  languages.  [required]\n  -h, --help                      Show this message and exit.\n</code></pre>"},{"location":"cli-ref/#readalongs-tokenize","title":"readalongs tokenize","text":"<p>Tokenize XMLFILE for 'readalongs align' into TOKFILE.</p> <p>XMLFILE should have been produced by 'readalongs make-xml'. TOKFILE can then be augmented with word-specific language codes. 'readalongs align' can be called with either XMLFILE or TOKFILE as XML input.</p> <p>XMLFILE: Path to the XML file to tokenize, or - for stdin</p> <p>TOKFILE: Output path for the tok'd XML, or - for stdout [default: XMLFILE.tokenized.readalong]</p> <p>Usage:</p> <pre><code>readalongs tokenize [OPTIONS] XMLFILE [TOKFILE]\n</code></pre> <p>Options:</p> <pre><code>  -d, --debug            Add debugging messages to logger\n  -f, --force-overwrite  Force overwrite output files\n  -h, --help             Show this message and exit.\n</code></pre>"},{"location":"cli-ref/#readalongs-g2p","title":"readalongs g2p","text":"<p>Apply g2p mappings to TOKFILE into G2PFILE.</p> <p>TOKFILE should have been produced by 'readalongs tokenize'. G2PFILE can then be modified to adjust the phonetic representation as needed. 'readalongs align' can be called with G2PFILE instead of TOKFILE as XML input.</p> <p>The g2p cascade will be enabled whenever an XML element or any of its ancestors in TOKFILE has the attribute \"fallback-langs\" containing a comma- or colon-separated list of language codes. Provide multiple language codes to \"readalongs make-xml\" via its -l option to generate this attribute globally, or add it manually where needed. Undetermined, \"und\", is automatically added at the end of the language list provided via -l.</p> <p>With the g2p cascade, if a word cannot be mapped to valid ARPABET with the language found in the \"xml:lang\" attribute, the languages in \"fallback-langs\" are tried in order until a valid ARPABET mapping is generated.</p> <p>The output XML file can be used as input to align.</p> <p>TOKFILE: Path to the input tokenized XML file, or - for stdin</p> <p>G2PFILE: Output path for the g2p'd XML, or - for stdout [default: TOKFILE with .g2p. inserted]</p> <p>Usage:</p> <pre><code>readalongs g2p [OPTIONS] TOKFILE [G2PFILE]\n</code></pre> <p>Options:</p> <pre><code>  -f, --force-overwrite  Force overwrite output files\n  --debug-g2p            Display verbose messages about g2p errors.\n  -d, --debug            Add debugging messages to logger\n  -h, --help             Show this message and exit.\n</code></pre>"},{"location":"cli-ref/#readalongs-langs","title":"readalongs langs","text":"<p>List all the language codes and names currently supported by g2p that can be used for ReadAlongs creation.</p> <p>Usage:</p> <pre><code>readalongs langs [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"installation/","title":"Installation","text":"<p>See ReadAlongs/Studio/README.md</p>"},{"location":"outputs/","title":"Output Realizations","text":"<p>One of the main motivations for ReadAlong-Studio was to provide a one-stop-shop for audio/text alignment. With that in mind, there are a variety of different output formats that can be created. Here are a few:</p>"},{"location":"outputs/#simple-web-deployment","title":"Simple web deployment","text":"<p>The <code>www</code> folder generated by the CLI's <code>readalongs align</code> command or included in the Web Bundle download format from the Web App includes everything you need to host your ReadAlong on your own server.</p> <p>Copy the whole folder with all its contents to your web server, and that should work as is on most web servers. The <code>index.html</code> provided will generate a page that shows only your readalong.</p> <p>The elements of the <code>index.html</code> can also be copied into a larger page with other contents or multiple readalongs -- see Web Component details below.</p>"},{"location":"outputs/#wordpress-deployment","title":"WordPress deployment","text":"<p>Deploying to WordPress requires our wordpress plugin and the snippet generated by our Web or CLI app, which is included in the <code>readme.txt</code> file generated in each Web Bundle from the Web App, or in your output folder from the CLI.</p>"},{"location":"outputs/#web-component-details","title":"Web Component details","text":"<p>The standard output from ReadAlong-Studio consists of 1) a <code>.readalong</code> file in XML, 2) an audio file, 3) optional image assets, and 4) a sample index.html file bringing it all together, which you can mobilize to the web or hybrid mobile apps quickly and painlessly.</p> <p>This is done using the ReadAlong WebComponent. Web components are re-useable, custom-defined HTML elements that you can embed in any HTML, regardless of which framework you used to build your site, whether React, Angular, Vue, or just Vanilla HTML/CSS/JS.</p> <p>Below is an example of a minimal implementation in a basic standalone html page. Please visit https://stenciljs.com/docs/overview for more information on framework integrations.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;!-- Import fonts. Material Icons are needed by the web component --&gt;\n        &lt;link href=\"https://fonts.googleapis.com/css?family=Lato|Material+Icons|Material+Icons+Outlined\" rel=\"stylesheet\"&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;!-- Here is how you declare the Web Component --&gt;\n        &lt;read-along href=\"assets/sample.readalong\" audio=\"assets/sample.wav\"&gt;&lt;/read-along&gt;\n    &lt;/body&gt;\n\n    &lt;!-- The last step needed is to import the package --&gt;\n    &lt;script type=\"module\" src='https://unpkg.com/@readalongs/web-component@^1.4.0/dist/web-component/web-component.esm.js'&lt;/script&gt;\n&lt;/html&gt;\n</code></pre> <p>The above assumes the following structure, which is the default provided in the Web Bundle generated from the web app:</p> <pre><code>www\n\u251c\u2500\u2500 assets\n\u2502   \u251c\u2500\u2500 sample.wav\n\u2502   \u2514\u2500\u2500 sample.readalong\n\u251c\u2500\u2500 index.html\n\u2514\u2500\u2500 readme.txt\n</code></pre> <p>Then you can host your site anywhere, or run it locally (<code>cd www &amp;&amp; python3 -m http.server</code> for example)</p>"},{"location":"outputs/#single-file-html","title":"Single-file HTML","text":"<p>With <code>-o html</code>, the ReadAlongs Studio will output a completely self-contained HTML file that be shared by e-mail and used without requiring any access to the Internet.</p> <p>This file is also compatible with our Editor where you can make further modifications to your readalong.</p>"},{"location":"outputs/#elanpraat-files","title":"ELAN/Praat files","text":"<p>With <code>-o eaf</code> or <code>-o TextGrid</code>, the ReadAlongs Studio can output files in the ELAN eaf and Praat TextGrid file formats.</p>"},{"location":"outputs/#subtitle-files","title":"Subtitle files","text":"<p>With <code>-o srt</code> or <code>-o vtt</code>, the ReadAlongs Studio can output subtitle files in the SRT or WebVTT formats.</p>"},{"location":"start/","title":"Getting Started","text":"<p>This library is an end-to-end audio/text aligner. It is meant to be used together with the ReadAlong-Web-Component to interactively visualize the alignment.</p>"},{"location":"start/#background","title":"Background","text":"<p>The concept is a web application with a series of stages of processing, which ultimately leads to a time-aligned audiobook, i.e., a www bundle of:</p> <ul> <li>ReadAlong XML file describing text and alignment</li> <li>Audio file (WAV or MP3)</li> <li>HTML file describing the web component</li> </ul> <p>Which is displayed using the read-along web component.</p> <p>A book is generated as a standalong Offline HTML page and a www bundle by default, but can optionally be generated as ELAN, Praat or subtitle files.</p>"},{"location":"start/#required-knowledge","title":"Required knowledge","text":"<ul> <li>How to use a Command-line interface (CLI).</li> <li>How to edit and manipulate plain text and XML files using a text editor or a code editor.</li> <li>How to edit and examine an audio file with Audacity or similar software.</li> <li>How to spin up a local web server (e.g., see How do you set up a local testing server?)</li> </ul>"},{"location":"start/#what-you-need-to-make-a-readalong","title":"What you need to make a ReadAlong","text":"<p>In order to create a ReadAlong you will need two files:</p> <ul> <li>A text file, either in plain text (<code>.txt</code>) or in ReadAlong XML (<code>.readalong</code>)</li> <li>Clear audio in any format supported by ffmpeg</li> </ul> <p>The content of the text file should be a transcription of the audio file. The audio can be spoken or sung, but if there is background music or noise of any kind, the aligner might have a harder time. Clearly enunciated audio is also likely to increase accuracy.</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>Note</p> <p>This troubleshooting guide is under construction.</p>"},{"location":"troubleshooting/#troubleshooting","title":"Troubleshooting","text":"<p>This document in intended to list common errors your may encounter when trying to run ReadAlongs, and ways to debug them.</p> <p>It only ever got one contribution, but more can get added here as needed.</p>"},{"location":"troubleshooting/#phones-missing-in-the-acoustic-model","title":"Phones missing in the acoustic model","text":"<p>Note</p> <p>Troubleshooting item under construction</p> <p>You may get an error that looks like this:</p> <p>The general structure of your error would look like <code>Phone [character] is missing in the acoustic model; word [index] ignored</code> This error is most likely caused not by a bug in your ReadAlong input files, but by an error in one of your g2p mappings. The error message is saying that there is a character in your ReadAlong text that is not being properly converted to English-arpabet (eng-arpabet), which is the language ReadAlong uses to map text to sound. Thus, ReadAlong cannot match your text to a corresponding sound (phone) in your audio file because it cannot understand what sound the text is meant to represent. Follow these steps to debug the issue in g2p.</p> <ol> <li> <p>Identify which characters in each line of the error message are not being converted to eng-arpabet. These will either be:</p> <ol> <li> <p>characters that are not in caps (for example <code>g</code> in the string    <code>gUW</code> in the error message shown above.)</p> </li> <li> <p>a character not traditionally used in English (for example <code>\u00e9</code> or <code>\u0166</code>,    or <code>\u02b0</code> in the error message shown above.) You can confirm you    have isolated the right characters by ensuring every other    character in your error message appears as an output in the    eng-ipa-to-arpabet    mapping.    These are the problematic characters we need to debug in the error    message shown above: <code>g</code> and <code>\u02b0</code>.</p> </li> </ol> </li> <li> <p>Once you have isolated the characters that are not being converted to    eng-arpabet, you are ready to begin debugging the issue. Start at    step 3 below for each problematic character.</p> </li> <li> <p>Our next step is to identify which mapping is converting the    problematic characters incorrectly. Most of the time, the issue will    be in either the first or the second of the following mappings:</p> <ol> <li>xyz-ipa (where xyz is the ISO language code for your mapping)</li> <li>xyz-equiv (if you have one)</li> <li>xyz-ipa_to_eng-ipa (this mapping must be generated    automatically in g2p. Refer //here_in_the_guide to see how to do    this.)</li> <li>eng-ipa-to-arpabet    mapping    (The issue is rarely found here, but it doesn\u2019t hurt to check.)</li> </ol> </li> <li> <p>Find a word in your text that uses the problematic character. For the    sake of example, let us assume the character I am debugging is <code>g</code>,    that appears in the word \"dog\", in language \"xyz\".</p> </li> <li> <p>Make sure you are in the g2p repository and run the word through    <code>g2p convert</code> to confirm you have isolated the correct characters    to debug: <code>g2p convert dog xyz eng-arpabet</code>. Best practice is to    copy+paste the word directly from your text instead of retyping it.    Make sure to use the ISO code for your language in place of \"xyz\".    If the word converts cleanly into eng-arpabet characters, your issue    does not lie in your mapping. //Refer to other potential RA issues</p> </li> <li> <p>From the result of the command run in 5, note the characters that do    not appear as inputs in the eng-ipa-to-arpabet    mapping.    These are the characters that have not been converted into characters    that eng-ipa-to-arpabet can read. These should be the same characters    you identified in step 2.</p> </li> <li> <p>Run <code>g2p convert dog xyz xyz-ipa</code>. Ensure the result is what you    expect. If not, your error may arise from a problem in this mapping.    refer_to_g2p_troubleshooting. If the result is what you expect,    continue to the next step.</p> </li> <li> <p>Note the result from running the command in 7. Check that the    characters [TODO-fix this text] (appear/being mapped by generated --    use debugger or just look at mapping)</p> </li> </ol>"},{"location":"web-app/","title":"ReadAlong Studio Web Applications","text":""},{"location":"web-app/#the-readalong-studio-web-app","title":"The ReadAlong Studio Web App","text":"<p>The ReadAlong Studio functionality can now be used both from a CLI (see the rest of this guide) and a Web application meant to be as easy to use as possible.</p> <p>See</p> <ul> <li>ReadAlongs-Studio Web App,</li> <li>El Studio de ReadAlong en espa\u00f1ol, or</li> <li>L'appli Studio ReadAlong en fran\u00e7ais.</li> </ul> <p>The usage documentation for the Web App can be accessed by clicking on the \"Take the tour\"/\"\u00a1Siga el tour!\"/\"Visite guid\u00e9e\" button at the top of the page. We encourage you to take this tour on your first visit, or if you have not taken it yet, as it explains all the parts of the process.</p>"},{"location":"web-app/#web-app-features","title":"Web App features","text":"<p>The Web App supports the most commonly used features of the ReadAlong Studio:</p> <ul> <li>recording audio or using pre-existing audio</li> <li>typing text or using pre-existing text</li> <li>creating the readalongs</li> <li>adding translations</li> <li>adding images</li> <li>saving the results in the single file Offline HTML format</li> <li>saving the results in a multi-file Web Bundle for deployment on a web page</li> <li>fixing alignment errors or typos in the Editor (see below for more details about the Editor)</li> </ul>"},{"location":"web-app/#input-text-format","title":"Input text format","text":"<p>The input text has to be provided in the same format as for the CLI. As documented by clicking on <code>? Format</code> in the Text input box:</p> <ul> <li>Each line should ideally contain one sentence, although that is not a strict rule.</li> <li>Paragraph breaks are indicated by inserting a blank line.</li> <li>Page breaks are indicated by inserting two consecutive blank lines.</li> </ul>"},{"location":"web-app/#the-readalong-studio-editor","title":"The ReadAlong Studio Editor","text":"<p>Recently, the team has also added a much requested feature: the Editor, where you can improve the alignments or fix errors in your readalong.</p> <p>Links:</p> <ul> <li>ReadAlong Studio Editor</li> <li>L'\u00e9diteur du Studio ReadAlong</li> <li>El editor del Studio de ReadAlong</li> </ul> <p>The usage documentation for the Editor is also the tour. Please click on the \"Take the tour\"/\"\u00a1Siga el tour!\"/\"Visite guid\u00e9e\" button at the top of the page to get familiar with all the features of the Editor.</p>"},{"location":"web-app/#opening-a-readalong-in-the-editor","title":"Opening a ReadAlong in the Editor","text":"<p>The Editor can only read the single file Offline HTML format produced by the ReadAlongs Studio.</p> <p>You can get this file in various ways:</p> <ul> <li>By downloading the Offline HTML file format from the ReadAlongs Studio Web App (this is the default format).</li> <li>If you downloaded a Web Bundle, you will find an Offline-HTML folder in the zip file containing it.</li> <li>From the CLI, using the <code>-o html</code> option to <code>readalongs align</code> generates the Offline HTML file.</li> </ul>"},{"location":"web-app/#editor-features","title":"Editor features","text":"<p>In the Editor, you can:</p> <ul> <li>Fix alignment errors made by the automatic alignment, by dragging word boundaries in the Audio Toolbar at the bottom.</li> <li>Fix spelling mistakes in your text, by modifying words in the Audio Toolbar at the bottom.</li> <li>Add/remove/update images and translations in your readalong.</li> <li>Update your title and subtitle.</li> <li>Convert your Offline HTML file into the Web Bundle and other export formats.</li> </ul>"}]}